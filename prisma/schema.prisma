// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  password              String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  is2FAEnabled          Boolean                @default(false)
  role                  UserRole               @default(USER)
  createdAt             DateTime               @default(now())
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model Story {
  id        String   @id @default(uuid())
  name      String
  content   String
  createdAt DateTime @default(now())

  @@map("stories")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model ResetPasswordToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
  @@map("reset_password_tokens")
}

model TwoFactorToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_confirmations")
}
